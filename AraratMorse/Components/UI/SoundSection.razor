@using AraratMorse.Stores.TranslationState
@using AraratMorse.Stores.LanguageState
@using AraratMorse.Stores.SettingStore
@using AraratMorse.Stores.SoundStore
@using AraratMorse.Stores.ConversionState
@using MorseSharp
@using AraratMorse.Stores
@inherits Fluxor.Blazor.Web.Components.FluxorComponent


@* Overlay *@
<div @onclick="CloseSection" class="@(soundState!.Value.IsSectionOpened ? "fixed" : "hidden") inset-0 bg-black z-20 opacity-10"></div>

<div class="fixed bottom-0 left-0 flex flex-col justify-between bg-black text-white h-full z-50 items-center w-full rounded-lg p-5 mt-10 transition-transform shadow-top @(!IsOpened ? "translate-y-full" : "translate-y-0")">

    @* Close Button *@
    <button @onclick="CloseSection" class="text-white text-start self-start rounded-full p-2">
        <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24">
            <path fill="currentColor" d="M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10s10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17L12 13.41L8.41 17L7 15.59L10.59 12L7 8.41L8.41 7L12 10.59L15.59 7L17 8.41L13.41 12L17 15.59z"/>
        </svg>
    </button>

    @if (errorOccurred)
    {
        <p class=" absolute top-16 text-white text-xl">Could not generate the audio.</p>
    }
    else
    {
        @* Canvas *@
        <div class="rounded-lg relative z-0 w-full h-full">
            <canvas id="soundVisualizer"></canvas>
        </div>
        <audio id="audio" class="hidden" src="@($"data:audio/wav;base64, {System.Convert.ToBase64String(soundByte.ToArray())}")"></audio>
        @* Toolbar *@
        <div class="absolute flex gap-2 left-0 right-0 mx-auto w-28 top-16 bg-white px-3 py-2 rounded-3xl z-10">
            <button id="playBtn" @onclick=PlayAsync class="text-green-600">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16">
                    <path fill="currentColor" d="M6.235 2.192A1.5 1.5 0 0 0 4 3.499v9a1.5 1.5 0 0 0 2.235 1.308l8-4.5a1.5 1.5 0 0 0 0-2.615l-8-4.5Z"/>
                </svg>
            </button>
            <button id="pauseBtn" @onclick="PauseAsync" class="text-gray-300">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16">
                    <path fill="currentColor" d="M3.75 2A1.75 1.75 0 0 0 2 3.75v8.5c0 .966.784 1.75 1.75 1.75h1.5A1.75 1.75 0 0 0 7 12.25v-8.5A1.75 1.75 0 0 0 5.25 2h-1.5Zm7 0A1.75 1.75 0 0 0 9 3.75v8.5c0 .966.784 1.75 1.75 1.75h1.5A1.75 1.75 0 0 0 14 12.25v-8.5A1.75 1.75 0 0 0 12.25 2h-1.5Z"/>
                </svg>
            </button>
            <button id="stopBtn" @onclick="StopAsync" class="text-rose-300">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16">
                    <path fill="currentColor" d="M1 8a7 7 0 1 1 14 0A7 7 0 0 1 1 8Zm5-3a1 1 0 0 0-1 1v4a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1H6Z"/>
                </svg>
            </button>
            <button @onclick=Download class="text-gray-500">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16">
                    <path fill="currentColor" d="M5 2v2.5A1.5 1.5 0 0 0 6.5 6h2A1.5 1.5 0 0 0 10 4.5V2h.379a2 2 0 0 1 1.414.586l1.621 1.621A2 2 0 0 1 14 5.621V12a2 2 0 0 1-2 2V9.5A1.5 1.5 0 0 0 10.5 8h-5C4.673 8 4 8.669 4 9.498V14a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h1Zm1 0v2.5a.5.5 0 0 0 .5.5h2a.5.5 0 0 0 .5-.5V2H6ZM5 14h6V9.5a.5.5 0 0 0-.5-.5h-5c-.277 0-.5.223-.5.498V14Z"/>
                </svg>
            </button>
        </div>
    }

</div>

@code {

    #region States

    [Inject] IDispatcher? Dispatcher { get; set; }

    [Inject] IState<TranslationState>? TranslationState { get; set; }

    [Inject] IState<LanguageState>? languageState { get; set; }

    [Inject] IState<ConversionState>? conversionState { get; set; }

    [Inject] IState<SoundState>? soundState { get; set; }

    [Inject] IState<SettingState>? settingState { get; set; }

    #endregion

    #region Properties

    [Inject] IJSRuntime? runtime { get; set; }
    bool errorOccurred { get; set; }

    #endregion

    #region Parameters

    [Parameter] public bool IsOpened { get; set; }

    bool canPause { get; set; }
    bool canStop { get; set; }
    bool canPlayOrResume { get; set; } = true;

    #endregion

    #region Fields

    ReadOnlyMemory<byte> soundByte;

    #endregion

    #region Methods

    protected override void OnParametersSet()
    {
        Convert();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (soundState!.Value.IsSectionOpened)
        {
            await runtime!.InvokeVoidAsync("araratMorse.initAudio");
        }
    }

    void Convert()
    {
        try
        {
            //If it was text -> morse, then get the output and convert it.
            if (conversionState!.Value.IsEncoding)
            {
                Morse.GetConverter()
                    .ForLanguage(languageState!.Value.Language)
                    .ToAudio(TranslationState!.Value.Output)
                    .SetAudioOptions(settingState!.Value.CharSpeed, settingState!.Value.WordSpeed, settingState!.Value.frequency)
                    .GetBytes(out var spanByte);

                soundByte = spanByte.ToArray();
            }
            //Else convert it using the input which is the morse.
            else
            {
                Morse.GetConverter()
                    .ForLanguage(languageState!.Value.Language)
                    .ToAudio(TranslationState!.Value.Input)
                    .SetAudioOptions(settingState!.Value.CharSpeed, settingState!.Value.WordSpeed, settingState!.Value.frequency)
                    .GetBytes(out var spanByte);

                soundByte = spanByte.ToArray();
            }

            errorOccurred = false;
        }
        catch (Exception ex)
        {
            Console.Write(ex.Message);
            errorOccurred = true;
        }
    }

    async Task PlayAsync()
    {
        await runtime!.InvokeVoidAsync("araratMorse.play");
    }

    async Task PauseAsync()
    {
        await runtime!.InvokeVoidAsync("araratMorse.pause");
    }

    async Task StopAsync()
    {
        await runtime!.InvokeVoidAsync("araratMorse.stop");
    }

    //Download the audio, with the {text}.wav
    async Task Download()
    {
        var textName = conversionState!.Value.IsEncoding ? TranslationState!.Value.Input : TranslationState!.Value.Output;
        textName = textName.Split()[0];

        await runtime!.InvokeVoidAsync("araratMorse.download",
            textName);
    }


    async void CloseSection()
    {
        await StopAsync();
        SoundSectionAction action = new() {IsSectionOpened = false};
        Dispatcher!.Dispatch(action);
    }

    #endregion

}